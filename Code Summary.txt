------------------------------------------V1.0------------------------------------------------------------------------------------------------------------------------------------------------------------------------
0. obtained audio/images/map for future use with ezGif sprite splitter, GAMMAFP tools, Tiled, and Aseprite.

1. Created Index.html: 
-File to launch my game. Make note of the configs.js in the 'body'.
-Look at the phaser version, and how the matter plugin is installed.

2. Created configs.js:
-set game parameters here. Notice how parent is itself, 'configs.js'
-Notice how scene is linked to MainScene. Once MainScene is created you can link it.
-added .js at the end of MainScene on line 1 after it imports (auto populates that, have to add .js though).
-added physics and plugin based on setup specification. 
-Notice the debug is true and the scale is zoomed in 1.5x.

3. Created MainScene.js:
-exported MainScene from Phaser. Added the constructor and called the super of MainScene.
-preloaded the hero sprite sheet, it's atlas, and it's anims.
-created the player, added in keyboard inputs for movement. Used phasers Vector2 method.
-created animations for movement.
-Flipped the hero animation based on how it's moving.
------------------------------------------V1.0------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V1.1------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Misc:
-Modified this file name to Code Summary and zoom to 1.3.

5. Created Player.js:
-refactored code between MainScene.js and Player.js

6. Created Sensors/Colliders for Player

7. Created a Tiled Map, Imported it, and made custom collides for the water tiles, and imported the appropriate layer.
-the spacing for the RPG nature tileset had to be 2 to make the squares match, this is reflected in the create method as (32,32,0,2);
------------------------------------------V1.1------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V1.2------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Resource Object Layer in MainScene
-replace that 'static' kind of 'let tree = ...' and 'let rock = ...' spawn we did, and put it in addResources to generalize. 
-This allows us to create them on the map, rather than hard coding them in 1 by 1.

9. Created Circular Colliders for our resource layer objects (tree, bush, rock).

10. Fixed the yOrigin and placement of the Objects in our Object Layer to match our Tiled map.

11. Added more rocks, trees, and bushes to our map.
------------------------------------------V1.2------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V1.3------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. Refactored and condensed the resources code into a separate Resource.js folder.
------------------------------------------V1.3------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V1.4------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. In player.js (for now) Added in our single static dragon enemy.
------------------------------------------V1.4------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V1.5------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. In player.js (for now), added in a group of four hero sprites that spawn at random locations.
14. Added attack animation to hero, and changed player sensor to a rectangle.
------------------------------------------V1.5------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V1.6------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. In the player.js constructor, we call a method we created which tracks the collision between the player sensor and object colliders. 
-We created an empty touching array in the constructor of Player.js to house these values.
-In player.js, we created the method below our update(). This method adds the object touched to an array, and removes it once the player moves away. 
-To console log the object names, in resources.js constructor, we let this.name = resource.type. resource.type is the name of the object in Tiled.
------------------------------------------V1.6------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V1.7------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16. Zoomed in to 1.4 in configs.js. Changed the player sensor rectangle size.
17. In Resource.js, we created hit() method and dead property, loaded in tree/bush/rock audio, assigned the sounds to the hit property via the constructor.  
18. Created the whackStuff method that utilizes our hit() method, dead property, and our previous heroTouchingTrigger method we made.
19. Added in the whackStuff method in the case where our player is attacking. ***Still need to set a time interval or specific frame for hit() to activate, rather than just every game tick that the attack animation is active. 
------------------------------------------V1.7------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V1.8------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20. Created DropItem.js file.
-exported it as a class via phaser. Added a constructor with data, called super and passed in the data I wanted.
-Customized the items colliders.
-Added pickup sounds and function.
21. In Player.js:
-Created createPickupCollisions method to deal with item collisions. Called it in the constructor and passed in the player collider.
-Added the items spritesheet in preload.
22. In Resource.js:
-We define the drops property in the constructor, parsing the string as an array.
-We added to the hit method, if object is dead, then drop the corresponding item.
------------------------------------------V1.8------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V1.9------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23. Created MatterEntity.js to keep track of commonalities between all things matter - resources, player, enemies, etc.
-Heavily modified Resource.js and Player.js, put some things into MatterEntity.js
------------------------------------------V1.9------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V2.0------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24. Iterated the player with an iterator, some object functionalities do not work (anims/movement) but collisions and pickup function and sound work.
------------------------------------------V2.0------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V2.1------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25. Added Chamfer to player's collider.
26. Found the proper syntax to fix the whackStuff() issue getting called every tick. 
- Used 'console.log(this.anims) to see what was going on. We see currentFrame is the animation frame, and textureFrame is the current specific anim displayed. So we link them together.
27. This didn't fix the problem entirely, we needed to add a flag so that the hit method gets called only on the first appearance of the frame displayed,
    rather than for the whole frame, since a whole frame still has multiple game ticks.
- Using a flag, our attack condition's logic now looks like this:
4444|5|5556666
ffff|f|tttffff
____|H|_______
Moving through frame 4, the flag is false, and only the first tick of 5, it is still false. Immediately it becomes true, which stops the hitting for the rest of frame 5 based on our conditional logic.
So then we move on to frame 6 and so on being false again. (We also just set the flag to false in the constructor as a default).
28. Added map2 as a second map, and modified original map.json to include another object layer 'Boundary' for the future scene transitions.

------------------------------------------V2.1------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V2.2------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29. Added map2.js as another scene. 
-Created scene transition in MainScene and SecondScene updates. (Right now just have it based on raw position rather than my Tiled Map Object).
-Modified configs.js and index.html to accomadate for the scene. Also renamed the tile layer in map2.json to 'background'
-Current bug: Everything works fine, but when I transition from one scene, and then back to the original, It freezes when I try to hit resources (but not the spawned players).
-Need to figure out spawn points and proper data transfer between scenes.
------------------------------------------V2.2------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V2.3------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29. Added camera to MainScene and map2.
30. Added tint to player if he's at certain position.
31. Added scene fade transition.
32. Attempted to make toggle for walking.
------------------------------------------V2.3------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------V2.4------------------------------------------------------------------------------------------------------------------------------------------------------------------------
33. Added particles using cursors.png
34. Added StartScene.js
------------------------------------------V2.4------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Commit 2------------------------------------------------------------------------------------------------------------------------------------------------------------------------
35. Added ash.png, used this as particles in map2 instead.
36. Added rain.png, used this as particles in mainscene.
37. Added lightning.png, used this as particles in mainscene.
38. Added custom cursor to mainscene, added custom cursor.
------------------------------------------Commit 2------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Commit 3 (Inventory Branch)------------------------------------------------------------------------------------------------------------------------------------------------------------------------
39. Created InventoryScene.js, added it to configs. Launched it in MainScene.
    -made it's constructor which contained properties about the columns, rows, spacing, margin, tile size, and an empty inventory array.
    -sent InventoryScene the mainScene data with our init(data) method.
    -made a getter method to get the tile size and UI information to scale properly.
    -made the refresh method which actually shows the UI. (Deals with iteration, placement, sprite, scale, and wrapping of inventory squares)
    -called the refresh method in create().
    Summary: We have squares now, but no functionality yet.
------------------------------------------Commit 3 (Inventory Branch)------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Commit 4 (Inventory2 Branch)------------------------------------------------------------------------------------------------------------------------------------------------------------------------
40. Created Inventory.js, tweaked MainScene launch to include it.
41. Created Items.js to store some of the items we wanted to have at hand.
42. Built upon InventoryScene.js to be able to add items to inventory slots.
43. Imported inventory to the player, and made it a class via the 'new' keyword.
44. Added the ability to add items to our inventory. Refactored max columns and max rows.
------------------------------------------Commit 4 (Inventory2 Branch)------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Commit 5 (Inventory3 Branch)------------------------------------------------------------------------------------------------------------------------------------------------------------------------
45. In Inventory.js, created method to move a selected item sprites index 
46. In InventoryScene.js, created method to destroy inventory slots.
    -Implemented hover logic and pointer on logic to be able to drag objects.
    -Implemented dragstart and dragend logic so that the UI and model can physically move the sprites and snap them to an inventory slot.
    -Created toggle to show x rows or y maxRows.
------------------------------------------Commit 5 (Inventory3 Branch)------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Commit 6 (Inventory4 Branch)------------------------------------------------------------------------------------------------------------------------------------------------------------------------
47. In Inventory.js, created 'selected' property in constructor to set initial tint of slot 0.
    -Added a getter to get the selected item.
    -Added a method to get the selected items frame. 
48. In InventoryScene.js, created method to tint the selected inventory slot.
    -In create, made a method to select a slot index with our scroll wheel and properly highlight and wrap around.
------------------------------------------Commit 6 (Inventory4 Branch)------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Commit 7 (Inventory5 Branch)------------------------------------------------------------------------------------------------------------------------------------------------------------------------
49. Fixed the frame bug with picking up items by modifying the hit method code in MatterEntity, and including 'this.name = data.name' in DropItem constructor.
------------------------------------------Commit 7 (Inventory5 Branch)------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Crafting1 Branch------------------------------------------------------------------------------------------------------------------------------------------------------------------------
50. Created UIBaseScene.js to handle our crafting and inventory scene similarities.
    -passed 'name' into constructor and super, and some similar properties. And the tile scale getter.
    -extend the base scene instead of phaser scene for inventoryScene and CraftingScene. Imported UIBaseScene into InventoryScene.
51. Created CraftingScene.js, which extends UIBaseScene.
    -passing in CraftingScene to super will call the constructor of our UIBaseScene, which will in turn call the Phaser.Scene.
    -created empty array of crafting slots.
    -initialized some data we wanted.
    -launched crafting scene in MainScene.
    -Added craftingScene to configs.
    -Created multiple crafting slots in our updateCraftableSlots method, positioned and iterated them, added ability to destroy them.
52. Defined mats for craftable materials in items.js
------------------------------------------Crafting1 Branch------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Crafting2 Branch------------------------------------------------------------------------------------------------------------------------------------------------------------------------
53. Created Crafting.js the crafting model.
    -created updateItems method and put it in the updateCraftableSlots method in CraftingScene.
    -Assigned crafting to mainScene.
    -created getItemQuantity in inventory.js
    -In CraftingScene in updateCraftableSlots method, put tints and corresponding frames to crafting mats and craftable items.
------------------------------------------Crafting2 Branch)------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Crafting3 Branch------------------------------------------------------------------------------------------------------------------------------------------------------------------------
54. Mousewheel functionality in CraftingScene.js for our crafting slots. Tinting of slots when scrolling.
55. Toggle the crafting menu with the "C" key in MainScene.js
56. Stopped the dual scrolling of both menus when they are both open, done in inventoryScene.
57. Implement ability to actually craft items with "E" key in CraftingScene.
58. Made Craft() method in Crafting.js to craft items
59. Made removeItems method in Inventory to remove mats after crafting.
------------------------------------------Crafting3 Branch------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Master Branch------------------------------------------------------------------------------------------------------------------------------------------------------------------------
60. Cleaned up some comments.
61. Added ControlsScene.js to show the player the controls for now. Imported where necessary. (Added controls.png image as well).
62. Moved Crafting Slots UI to bottom left of the screen.
63. Added craftable health potions in Items.js
------------------------------------------Master Branch------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Enemies-Branch-1------------------------------------------------------------------------------------------------------------------------------------------------------------------------
64. Created Enemies object layer in Tiled. Put down signposts as dummy sprites for various enemies. Added custom properties and name to the signposts corresponding to the desired enemy.
    -called in the enemies and all their needed properties.
65. Commented out our old attempts to generate multiple enemies.
66. Imported enemy.js into MainScene, made empty enemies array, inserted our preload, added enemy spawns to that array.
------------------------------------------Enemies-Branch-1------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Enemies-Branch-1 (Movement and Attacks) ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
67. Added colliders and sensors to enemies.
68. Attack method, movement via subtracting vectors between player and enemy, movement animations, flipx, attack timer.
69. Called the onDeath method in MatterEntity when you die. Use this in Player.js to show a death sprite or change scenes.
    -Notice it's kept blank in MatterEntity, but filled with what we want in Player.js
70. Added rudimentary restart transition in MainScene, but doesn't really work yet.
------------------------------------------Enemies-Branch-1 (Movement and Attacks) ------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Misc Additions from Various ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
71. Added rain and lightning sounds via Particle Sounds branch.
72. Centered Screen by adding canvas code to index.html
73. Changed lightning sound frequency
74. Added pre-made progress bar in MainScene, tweaked it, and tried to make 'PreloadScene.js' for it. Still need to have to load based on actual game assets, and not images that I don't have.
75. Added 'tintable' custom property to Tiled Objects (Enemys and Resources). Declared it in MatterEntity.js constructor, loaded them in to Enemy and Resource constructor and super.
    -Added logic to player.js whackStuff method, so that when the player hits a gameObject, only objects with tintable set to true will be tinted. (Used simple function to set tint and a timer so the tint lasts 200ms).
76. In Enemy's 'hit' method, allowed the player to be tinted when he is hit by an enemy.
77. Added volume setting for sounds.
------------------------------------------Misc Additions from Various ------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------Health Bar Branch------------------------------------------------------------------------------------------------------------------------------------------------------------------------
78. Succesfully drew a health bar. Does not scroll with camera, and does not have any functionality. this.health association may have issues
    -Since 'health' is a property of enemies, resources, and the player, 'health' property may get confused. May need to specify/differentiate between all the different object's health.
------------------------------------------Health Bar Branch------------------------------------------------------------------------------------------------------------------------------------------------------------------------